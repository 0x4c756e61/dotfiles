if status is-interactive
    # Commands to run in interactive sessions can go here
    starship init fish | source
    zoxide init fish | source
end

# export ssh agent
if not set -q SSH_CONNECTION
    export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
    export SSH_ASKPASS=ksshaskpass
end

# Remove fish greating
set -g fish_greeting

# import the fvenv plugin to be able to source the home-manager configs
set -a fish_function_path ~/.config/fish/plugin-foreign-env/functions
fenv source ~/.nix-profile/etc/profile.d/hm-session-vars.sh

# Exports
export VISUAL="helix"
export EDITOR="$VISUAL"
export TERM='xterm-256color'
export GNUMAKEFLAGS=-j10
export CMAKE_BUILD_PARALLEL_LEVEL=10

abbr -a -g cls clear # Clear
abbr -a -g yay paru
abbr -a -g cat bat
abbr -a -g cd z

alias ls='eza --icons'
alias woman='man'
alias hx="helix"
alias startw="dbus-run-session startplasma-wayland"
alias hm="home-manager"

# git
alias gl="git log --all --graph --pretty=format:'%C(magenta)%h %C(white) %an %ar%C(auto) %D%n%s%n'"

# fun
alias crADB="adb shell am start 'https://www.youtube.com/watch?v=LDU_Txk06tM'"

set -x MANPAGER "bat -pl man"
set -a PATH /home/luna/.local/share/bin
set -a PATH /home/luna/.local/bin
set -a -p PATH /opt/clang-format-static/
set -a PATH /home/luna/.cargo/bin
set -a PATH /home/luna/.dotnet/tools

# keybinds
## remove word on ctrl-backspace in vi normal mode
bind ctrl-backspace backward-kill-path-component

function ytmusic --wraps mpv -d "Play music from youtube"
    status job-control full
    mpris-discord-rpc -a mpv &
    set mpris_pid $last_pid
    mpv --title=mpv-music-popup $argv[1] --hwdec=auto --ytdl-format="bestvideo[height=?1080][fps<=?100]+bestaudio/best"
    kill $mpris_pid

end

function shizuku_start -d "Start shizuku on the connected device if it isn't already running"
    # hack for notify-send to be able to connec to DBUS under udev
    set -x DBUS_SESSION_BUS_ADDRESS unix:path=/run/user/1000/bus

    if test -z (adb devices | sed '2p;d')
        notify-send -e -a Android "Searching for device" "No devices found!" -i smartphone
        return
    end

    # Check if shizuku is installed
    set shizuku_is_installed (adb shell pm list packages | rg shizuku &> /dev/null && echo yes || echo no)

    if test $shizuku_is_installed = no
        set install (notify-send -e -a Android "New android device detected !" "This device does not appear to have shizuku installed, do you wish to install and run it?" -i smartphone --action=yes="Yes, install the latest version" --action=no="No")
        switch $install
            case yes
                set notif_num (notify-send -ep -a Android Installer "Downloading latest shizuku..." -i smartphone)
                set url (xh -I GET https://api.github.com/repos/RikkaApps/Shizuku/releases | jq -r ".[0].assets[0].browser_download_url")
                xh -I -q --download $url --output /tmp/shizuku.apk
                set notif_num (notify-send -ep -a Android Installer "Installing shizuku..." -i smartphone -r "$notif_num")
                adb install /tmp/shizuku.apk
                set notif_num (notify-send -ep -a Android Installer "Install complete..." -i smartphone -r "$notif_num")
                adb shell am start-activity -S moe.shizuku.privileged.api/moe.shizuku.manager.MainActivity

                # wait until the file are generated by the manager before running them
                # terrible implementation of watch, since watch cannot run in the environment made by udev
                set counter 0
                while adb shell "test ! \( -f /sdcard/Android/data/moe.shizuku.privileged.api/start.sh \)"; and test "$counter" -le 9
                    set counter (math $counter + 1)
                    echo "Waiting for manager to generate files"
                    sleep 0.5
                end

            case "no", '*'
                return

        end

    end

    set shizuku_pid (adb shell ps -o PID,NAME | rg shizuku_server | cut -d' ' -f1)
    if test -n "$shizuku_pid"
        echo "Shizuku is already running on device with pid $shizuku_pid"
        return
    end
    adb shell /data/app/~~5yUOQNttTA6taujdSXq3SQ==/moe.shizuku.privileged.api-gvBa9CcvQELt8vtGkvG8Sg==/lib/arm64/libshizuku.so
    notify-send -ep -a Android "Auto Start" "Shizuku has been started !" -i smartphone -r "$notif_num"

end

function gitreset
    echo -ne "\033[0;1;31mDelete all unstaged commits ? (y/n)"
    read -l -n 1 -P "" response
    if test "$response" = y
        git reset --hard HEAD
        echo -e "\033[0;1;32mWorkdir clean"
    end
end

function chfan -d "Change fan speed"
    switch $argv[1]
        case fullspeed
            echo 0 | sudo tee /sys/devices/platform/asus-nb-wmi/hwmon/hwmon6/pwm1_enable
        case auto
            echo 2 | sudo tee /sys/devices/platform/asus-nb-wmi/hwmon/hwmon6/pwm1_enable

        case '*'
            echo "Invalid fan speed: $argv[1]; Available speeds: fullspeed, auto"
            return 1

    end

end
complete -c chfan -a 'auto fullspeed' --no-files

function chcpufreq -d "Sets the cpu maximum frequency"
    if test "$argv[1]" -eq 0
        bat -p /sys/devices/system/cpu/cpu0/cpufreq/amd_pstate_max_freq | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq
        bat -p /sys/devices/system/cpu/cpu0/cpufreq/amd_pstate_lowest_nonlinear_freq | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq
        echo "cpu frequency has been reset"
        return
    end

    echo (qalc -t "$argv[1] GHz to kHz" | cut -d' ' -f1) | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq
    echo "cpu frequency set to $argv[1] to GHz"
end

function lsmip -d "Lists Manually Installed packages"
    set progress üïõ üïê üïë üïí üïì üïî üïï üïñ üïó üïò üïô üïö
    set pcounter 1

    set mips (history | rg "(paru|pacman|yay|aura) -Sy?u? (.*)" -or '$2' | sed -e 's/--\w*//g' | sed -e 's/\w*\///' | rg --invert-match "[<>=]" | sed -e 's/[*/\\]*//g' | sed -e 's/ /\n/g' | sed -e 's/^-\\w*//' | sort -u)
    set installed_pkgs ""

    for package in $mips
        echo "$progress[$(math $pcounter % (count $progress) + 1)] - Checking $package"
        pacman -Qq $package &>/dev/null
        if test $status -eq 0
            set -a installed_pkgs $package
        end
        set pcounter (math $pcounter + 1)
        printf "\e[1A\e[2K"
    end

    echo $installed_pkgs
end

function mp3
    yt-dlp "$argv[1]" --extract-audio --audio-format mp3
end

function run0edit
    function get_file_owner
        echo (eza --no-time --no-filesize --no-git --no-permissions --no-symlinks --color=never -l "$argv[1]" | string split " " -f1)
    end

    if test ! -n "$argv[1]"
        echo "usage: run0edit file..."
        return 1
    end

    set original_path "$argv[1]"

    if test -O $original_path
        echo "run0edit: $original_path: editing file owned by current user is not permitted"
        return 1
    end

    set file_ext (string split '.' -r -m1 -f2 "$argv[1]")
    set file_name (string split '/' -r -m1 -f2 "$argv[1]" | string split '.' -f 1)
    set tmp_file_name "/tmp/run0edit-$file_name-$(date +"%N").$file_ext"

    set fowner (get_file_owner $original_path)
    set caller (whoami)

    # echo "$tmp_file_name"
    run0 --background= --setenv=caller=$caller --setenv=file_ext=$file_ext --setenv=file_name=$file_name --setenv=original_path=$original_path --setenv=tmp_file_name=$tmp_file_name fish -c 'cp --preserve=all "$original_path" "$tmp_file_name"; chown "$caller" "$tmp_file_name"'

    if test "$status" -ne 0
        return
    end

    cp "$tmp_file_name" "$tmp_file_name-original"
    $EDITOR "$tmp_file_name"

    diff -q "$tmp_file_name-original" $tmp_file_name &>/dev/null
    if test "$status" -ne 0
        echo "Modifications detected, copying new files..."
        run0 --background= --setenv=fowner=$fowner --setenv=original_path=$original_path --setenv=tmp_file_name=$tmp_file_name fish -c 'chown "$fowner" "$tmp_file_name";mv "$tmp_file_name" "$original_path"'
    else
        echo "No modifications detected"

    end

    rm "$tmp_file_name-original"
end

function lowfi --wraps ghostty -d "Play music from chillpop/lowfigirl"
    ghostty --command="echo 'Ôì°  ~ lowfi' && lowfi -w 6 -t ~/.local/share/lowfi/chillhop.txt" --class=ghostty.lowfi --window-padding-x=1 --window-padding-y=1 --window-padding-balance=true --confirm-close-surface=false --gtk-single-instance=true
end
